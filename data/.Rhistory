setwd("~/GitHub/IODS-project/data")
load("~/GitHub/IODS-project/data/BPRSL.Rdata")
load("~/GitHub/IODS-project/data/RATSL.Rdata")
load("BPRSL.RData")
ls()
RATSL
load("~/GitHub/IODS-project/data/BPRSL.Rdata")
load("~/GitHub/IODS-project/data/RATSL.Rdata")
View(BPRSL)
load("~/GitHub/IODS-project/data/BPRSL.Rdata")
Summary(BPRSL)
load("~/GitHub/IODS-project/data/BPRSL.Rdata")
summary(BPRSL)
load("~/GitHub/IODS-project/data/BPRSL.Rdata")
summary(BPRSL)
glimpse(BPRSL)
load("~/GitHub/IODS-project/data/RATSL.Rdata")
load("~/GitHub/IODS-project/data/RATSL.Rdata")
summary(RATSL)
glimpse(RATSL)
library(tidyr)
library(dplyr)
library(ggplot2)
# Draw the plot
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
# Standardise the variable bprs
BPRSL <- BPRSL %>%
group_by(week) %>%
mutate(stdbprs = (bprs - mean(bprs))/sd(bprs) ) %>%
ungroup()
# Glimpse the data
glimpse(BPRSL)
# Plot again with the standardised bprs
ggplot(BPRSL, aes(x = week, y = stdbprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
scale_y_continuous(name = "standardized bprs")
# Number of weeks, baseline (week 0) included
n <- BPRSL$week %>% unique() %>% length()
# Summary data with mean and standard error of bprs by treatment and week
BPRSS <- BPRSL %>%
group_by(treatment, week) %>%
summarise( mean = mean(bprs), se = sd(bprs)/sqrt(n) ) %>%
ungroup()
# Glimpse the data
glimpse(BPRSS)
# Plot the mean profiles
ggplot(BPRSS, aes(x = week, y = mean, linetype = treatment, shape = treatment)) +
geom_line() +
scale_linetype_manual(values = c(1,2)) +
geom_point(size=3) +
scale_shape_manual(values = c(1,2)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, linetype="1"), width=0.3) +
theme(legend.position = c(0.8,0.8)) +
scale_y_continuous(name = "mean(bprs) +/- se(bprs)")
# Create a summary data by treatment and subject with mean as the summary variable (ignoring baseline week 0).
BPRSL8S <- BPRSL %>%
filter(week > 0) %>%
group_by(treatment, subject) %>%
summarise( mean=mean(bprs) ) %>%
ungroup()
# Glimpse the data
glimpse(BPRSL8S)
# Draw a boxplot of the mean versus treatment
ggplot(BPRSL8S, aes(x = treatment, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(bprs), weeks 1-8")
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
BPRSL8S1 <- BPRSL8S %>%
filter(mean < 60)
# Perform a two-sample t-test
t.test(mean ~ treatment, data = BPRSL8S1, var.equal = TRUE)
# Add the baseline from the original data as a new variable to the summary data
BPRSL8S2 <- BPRSL8S %>%
mutate(baseline = BPRS$week0)
# Fit the linear model with the mean as the response
fit <- lm(mean ~ baseline + treatment, data = BPRSL8S2)
# Compute the analysis of variance table for the fitted model with anova()
anova(fit)
# Perform a two-sample t-test
t.test(mean ~ treatment, data = BPRSL8S1, var.equal = TRUE)
# Add the baseline from the original data as a new variable to the summary data
BPRSL8S2 <- BPRSL8S %>%
mutate(baseline = BPRS$week0)
# Fit the linear model with the mean as the response
fit <- lm(mean ~ baseline + treatment, data = BPRSL8S2)
# Compute the analysis of variance table for the fitted model with anova()
anova(fit)
# Perform a two-sample t-test
t.test(mean ~ treatment, data = BPRSL8S1, var.equal = TRUE)
# Add the baseline from the original data as a new variable to the summary data
BPRSL8S2 <- BPRSL8S %>%
library(BPRS)
View(BPRS)
load("~/GitHub/IODS-project/data/BPRSL.Rdata")
load(BPRS)
setwd("~/GitHub/IODS-project/data")
write.csv(RATS, file = "RATS.csv", row.names=FALSE)
# Shweta Goswami
# Analysis of longitudinal data
# Data Wrangling of BPRS and RATS
# 08/12/2018
# Reading the BPRS data
BPRS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt", sep  =" ", header = T)
# Reading the RATS data
# read the RATS data
RATS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt", header = TRUE, sep = '\t')
# Looking at the (column) names of BPRS and RATS
names(BPRS)
names(RATS)
# Looking at the structure of BPRS and RATS
str(BPRS)
str(RATS)
# print out summaries of the variables
summary(BPRS)
summary(RATS)
#Glimpse of the dataset BPRS and RATS
library(dplyr)
glimpse(BPRS)
glimpse(RATS)
#Saving the original data to the data folder
write.csv(BPRS, file = "BPRS.csv", row.names=FALSE)
write.csv(RATS, file = "RATS.csv", row.names=FALSE)
# Brief summary of BPRS and RATS datasets
# The dataset BPRS has 40 obs. of  11 variables
# The dataset RATS has 16 obs. of  13 variables
# As obvious from the variables structure, the wide form of data presented response variable which is measured on each subject on several
# different occasions in a single row.
# So, the wide form means presenting data horizontally.
#Converting the categorical variables of both data sets to factors.
#BPRS dataset
BPRS$treatment <- factor(BPRS$treatment)
BPRS$subject <- factor(BPRS$subject)
#RATS dataset
RATS$ID <- factor(RATS$ID)
RATS$Group <- factor(RATS$Group)
#Converting the data sets to long form.
#BPRS data
library(dplyr)
library(tidyr)
BPRSL <-  BPRS %>% gather(key = weeks, value = bprs, -treatment, -subject)
#RATS data
RATSL <- RATS %>% gather(key = WD, value = Weight, -ID, -Group)
#Adding a week variable to BPRS and a Time variable to RATS
#BPRS data
BPRSL <-  BPRSL %>% mutate(week = as.integer(substr(weeks,5,5)))
#RATS data
RATSL <-  RATSL %>% mutate(Time = as.integer(substr(WD,3,4)))
# comparing long form with their wide form versions:
# Looking at the (column) names of BPRSL and RATSL
names(BPRSL)
names(RATSL)
# Looking at the structure of BPRSL and RATSL
str(BPRSL)
str(RATSL)
# print out summaries of the variables
summary(BPRSL)
summary(RATSL)
#Glimpse of the dataset BPRSL and RATSL
library(dplyr)
glimpse(BPRSL)
glimpse(RATSL)
# Interpretation of the wide and long form data:
# If we compare wide and long form data,
# The wide form combines one of the keys with the value variables and their columns represent groups.
# The wide data has multiple columns for outcomes as we can see in RATS and BPRS dataset
# The long form data presents each subject's response in multiple rows
# And every row shows a response/observation that belongs to a particular variable.
# Simplified, the long form represents columns of outcomes into a single response variable as evident in BPRSL and RATSL dataset.
# Thus, for regression function, long form data is preferred.
# In the current dataset,
# the wide form data of BPRS has 40 obs. of  11 variables
# the long form of BPRS has 360 obs. of  5 variables
# the wide form data of RATS has 16 obs. of  13 variables
# the long form of RATS has 176 obs. of  5 variables
# Saving the modified data set to the 'data' folder
save(BPRSL, file = "BPRSL.RData")
save(RATSL, file = "RATSL.RData")
setwd("~/GitHub/IODS-project/data")
setwd("~/GitHub/IODS-project/data")
# Check the dimensions of the data
dim(RATSL)
# Plot the RATSL data
ggplot(RATSL, aes(x = Time, y = Weight, group = ID)) +
geom_line(aes(linetype = Group)) +
scale_x_continuous(name = "Time (days)", breaks = seq(0, 60, 10)) +
scale_y_continuous(name = "Weight (grams)") +
theme(legend.position = "top")
# dplyr, tidyr, RATS and RATSL are available
# create a regression model RATS_reg
RATS_reg <- lm(Weight ~ Time + Group, data = RATSL)
# print out a summary of the model
summary(RATS_reg)
# dplyr, tidyr, RATS and RATSL are available
# access library lme4
library(lme4)
# Create a random intercept model
RATS_ref <- lmer(Weight ~ Time + Group + (1 | ID), data = RATSL, REML = FALSE)
# Print the summary of the model
summary(RATS_ref)
View(BPRSL)
View(RATSL)
library(tidyr)
library(dplyr)
library(ggplot2)
# Draw the plot
ggplot(RATSL, aes(x = Time, y = Weight, linetype = Group)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ ID, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(RATSL$Weight), max(RATSL$Weight)))
library(tidyr)
library(dplyr)
library(ggplot2)
# Draw the plot
ggplot(RATSL, aes(x = Time, y = Weight, linetype = ID)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ Group, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(RATSL$Weight), max(RATSL$Weight)))
# Number of weeks, baseline (week 0) included
n <- RATSL$Time %>% unique() %>% length()
# Summary data with mean and standard error of bprs by treatment and week
RATSS <- RATSL %>%
group_by(Group, Time) %>%
summarise( mean = mean(Weight), se = sd(Weight)/sqrt(n) ) %>%
ungroup()
# Glimpse the data
glimpse(RATSS)
# Plot the mean profiles
ggplot(RATSS, aes(x = Time, y = mean, linetype = Group, shape = Group)) +
geom_line() +
scale_linetype_manual(values = c(1,2)) +
geom_point(size=3) +
scale_shape_manual(values = c(1,2)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, linetype="1"), width=0.3) +
theme(legend.position = c(0.8,0.8)) +
scale_y_continuous(name = "mean(Weight) +/- se(Weight)")
# Number of weeks, baseline (week 0) included
n <- RATSL$Time %>% unique() %>% length()
# Summary data with mean and standard error of bprs by treatment and week
RATSS <- RATSL %>%
group_by(Group, Time) %>%
summarise( mean = mean(Weight), se = sd(Weight)/sqrt(n) ) %>%
ungroup()
# Glimpse the data
glimpse(RATSS)
# Plot the mean profiles
ggplot(RATSS, aes(x = Time, y = mean, linetype = Group, shape = Group)) +
geom_line() +
geom_point(size=3) +
scale_shape_manual(values = c(1,2)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, linetype="1"), width=0.3) +
theme(legend.position = c(0.8,0.8)) +
scale_y_continuous(name = "mean(Weight) +/- se(Weight)")
# Number of weeks, baseline (week 0) included
n <- RATSL$Time %>% unique() %>% length()
# Summary data with mean and standard error of bprs by treatment and week
RATSS <- RATSL %>%
group_by(Group, Time) %>%
summarise( mean = mean(Weight), se = sd(Weight)/sqrt(n) ) %>%
ungroup()
# Glimpse the data
glimpse(RATSS)
# Plot the mean profiles
ggplot(RATSS, aes(x = Time, y = mean, linetype = Group, shape = Group)) +
geom_line() +
geom_point(size=3) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, linetype="1"), width=0.3) +
theme(legend.position = c(0.8,0.8)) +
scale_y_continuous(name = "mean(Weight) +/- se(Weight)")
# Create a summary data by treatment and subject with mean as the summary variable (ignoring baseline week 0).
RATSL8S <- RATSL %>%
group_by(Group, ID) %>%
summarise( mean=mean(Weight) ) %>%
ungroup()
# Glimpse the data
glimpse(RATSL8S)
# Draw a boxplot of the mean versus treatment
ggplot(RATSL8S, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(Weight), time 0-64")
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
RATSL8S1 <- RATSL8S %>%
filter(mean < 60)
# Create a summary data by treatment and subject with mean as the summary variable (ignoring baseline week 0).
RATSL8S <- RATSL %>%
group_by(Group, ID) %>%
summarise( mean=mean(Weight) ) %>%
ungroup()
# Glimpse the data
glimpse(RATSL8S)
# Draw a boxplot of the mean versus treatment
ggplot(RATSL8S, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(Weight), time 0-64")
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
RATSL8S1 <- RATSL8S %>%
filter(mean < 60)
# Draw a boxplot of the mean versus treatment
ggplot(RATSL8S1, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(Weight), time 0-64")
# Create a summary data by treatment and subject with mean as the summary variable (ignoring baseline week 0).
RATSL8S <- RATSL %>%
group_by(Group, ID) %>%
summarise( mean=mean(Weight) ) %>%
ungroup()
# Glimpse the data
glimpse(RATSL8S)
# Draw a boxplot of the mean versus treatment
ggplot(RATSL8S, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(Weight), time 0-64")
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
RATSL8S1 <- RATSL8S %>%
filter(mean < 550)
# Draw a boxplot of the mean versus treatment
ggplot(RATSL8S1, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(Weight), time 0-60")
# Perform a two-sample t-test
t.test(mean ~ Group, data = RATSL8S1, var.equal = TRUE)
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
RATSL8S4 <- RATSL8S %>%
filter(Group < 2)
# Perform a two-sample t-test
t.test(mean ~ Group, data = RATSL8S4, var.equal = TRUE)
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
RATSL8S4 <- RATSL8S %>%
filter(Group < 1)
# Perform a two-sample t-test
t.test(mean ~ Group, data = RATSL8S4, var.equal = TRUE)
# Add the baseline from the original data as a new variable to the summary data
RATSL8S2 <- RATSL8S %>%
mutate(baseline = RATS$time1)
# Fit the linear model with the mean as the response
fit <- lm(mean ~ Group, data = RATSL8S2)
# Fit the linear model with the mean as the response
fit <- lm(mean ~ Group, data = RATSL8S1)
# Compute the analysis of variance table for the fitted model with anova()
anova(fit)
# # Fit the linear model with the mean as the response after filtering outlier
fit <- lm(mean ~ Group, data = RATSL8S)
# Fit the linear model with the mean as the response after filtering outlier
fit <- lm(mean ~ Group, data = RATSL8S1)
# Compute the analysis of variance table for the fitted model with anova()
anova(fit)
# # Fit the linear model with the mean as the response after filtering outlier
fit <- lm(mean ~ Group, data = RATSL8S)
# Fit the linear model with the mean as the response after filtering outlier
fit <- lm(mean ~ Group, data = RATSL8S1)
# Compute the analysis of variance table for the fitted model with anova()
anova(fit)
# # Fit the linear model with the mean as the response after filtering outlier
fit <- lm(mean ~ Group, data = RATSL8S)
# # Fit the linear model with the mean as the response after filtering outlier
fit <- lm(mean ~ Group, data = RATSL8S)
# # Fit the linear model with the mean as the response after filtering outlier
fit <- lm(mean ~ Group, data = RATSL8S)
# Fit the linear model with the mean as the response after filtering outlier
fit <- lm(mean ~ Group, data = RATSL8S1)
# Compute the analysis of variance table for the fitted model with anova()
anova(fit)
# # Fit the linear model with the mean as the response after filtering outlier
fit <- lm(mean ~ Group, data = RATSL8S)
# Fit the linear model with the mean as the response after filtering outlier
fit1 <- lm(mean ~ Group, data = RATSL8S1)
# Compute the analysis of variance table for the fitted model with anova()
anova(fit)
anova(fit1)
# Check the dimensions of the data
dim(BPRSL)
# Plot the BPRSL data
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) +
geom_line(aes(linetype = subject)) +
scale_x_continuous(name = "Time (days)", breaks = seq(0, 60, 10)) +
scale_y_continuous(name = "Weight (grams)") +
theme(legend.position = "top")
# Check the dimensions of the data
dim(BPRSL)
# Plot the BPRSL data
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (days)", breaks = seq(0, 60, 10)) +
scale_y_continuous(name = "Weight (grams)") +
theme(legend.position = "top")
# Check the dimensions of the data
dim(BPRSL)
# Plot the BPRSL data
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "week", breaks = seq(0, 4, 8)) +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
# Check the dimensions of the data
dim(BPRSL)
# Plot the BPRSL data
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "week", breaks = seq(0, 4, 8)) +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
# Check the dimensions of the data
dim(BPRSL)
# Plot the BPRSL data
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "week") +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
# Check the dimensions of the data
dim(BPRSL)
# Plot the BPRSL data
ggplot(BPRSL, aes(x = week, y = bprs)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "week") +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
# create a regression model RATS_reg
BPRS_reg <- lm(bprs ~ week + treatment, data = BPRSL)
# print out a summary of the model
summary(RATS_reg)
# create a regression model RATS_reg
BPRS_reg <- lm(bprs ~ week + treatment, data = BPRSL)
# print out a summary of the model
summary(BPRS_reg)
# dplyr, tidyr, lme4, ggplot2, RATS and RATSL are available
# create a random intercept and random slope model
BPRS_ref1 <- lmer(bprs ~ week + treatment + (week | subject), data = BPRSL, REML = FALSE)
# print a summary of the model
summary(BPRS_ref1)
# perform an ANOVA test on the two models
anova(BPRS_ref1, BPRS_ref)
# dplyr, tidyr, lme4, ggplot2, RATS and RATSL are available
# create a random intercept and random slope model
BPRS_ref1 <- lmer(bprs ~ week + treatment + (week | subject), data = BPRSL, REML = FALSE)
# print a summary of the model
summary(BPRS_ref1)
# perform an ANOVA test on the two models
anova(BPRS_ref1)
# dplyr, tidyr, RATS and RATSL are available
# access library lme4
library(lme4)
# Create a random intercept model
BPRS_ref <- lmer(bprs ~ week + treatment + (1 | subject), data = BPRSL, REML = FALSE)
# Print the summary of the model
summary(BPRS_ref)
anova(BPRS_ref)
# dplyr, tidyr, lme4, ggplot2, RATS and RATSL are available
# create a random intercept and random slope model
RATS_ref2 <- lmer(bprs ~ week * treatment + (week | subject), data = BPRSL, REML = FALSE)
# print a summary of the model
summary(BPRS_ref2)
# dplyr, tidyr, lme4, ggplot2, RATS and RATSL are available
# create a random intercept and random slope model
BPRS_ref2 <- lmer(bprs ~ week * treatment + (week | subject), data = BPRSL, REML = FALSE)
# print a summary of the model
summary(BPRS_ref2)
# perform an ANOVA test on the two models
anova(BPRS_ref2, BPRS_ref1)
# draw the plot
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "weeks") +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
# Create a vector of the fitted values
Fitted <- fitted(BPRS_ref2)
# Create a new column fitted to RATSL
BPRSL <- BPRSL %>%
mutate(Fitted)
# draw the plot of RATSL
ggplot(BPRSL, aes(x = week, y = Fitted)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "weeks") +
scale_y_continuous(name = "Fitted bprs") +
theme(legend.position = "top")
# perform an ANOVA test on the two models
anova(BPRS_ref, BPRS_ref1)
