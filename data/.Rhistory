# add countries as rownames
rownames(human) <- human$Country
# remove the Country variable
human_ <- select(human, -Country)
dim(human_)
# Define the row names of the data by the country names and remove the country name column from the data.
# add countries as rownames
rownames(human) <- human$Country
# remove the Country variable
human_ <- select(human, -Country)
dim(human_)
human_ <- human[1:last, ]
dim(human_)
# Define the row names of the data by the country names and remove the country name column from the data.
# add countries as rownames
rownames(human) <- human_$Country
# remove the Country variable
human_ <- select(human, -Country)
dim(human_)
# remove the Country variable
human_ <- select(human_, -Country)
dim(human_)
# read the human data
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep  =",", header = T)
# look at the (column) names of human
names(human)
# look at the structure of human
str(human)
# print out summaries of the variables
summary(human)
# Mutate the data: transform the Gross National Income (GNI) variable to numeric
# access the stringr package
library(stringr)
# look at the structure of the GNI column in 'human'
str(human$GNI)
# Transform the Gross National Income (GNI) variable to numeric
str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
#Excluding unneeded variables
# columns to keep
keep <- c("Country", "Edu2.FM", "Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
library(dplyr)
# select the 'keep' columns
human <- select(human, one_of(keep))
# print out a completeness indicator of the 'human' data
complete.cases(human)
# Remove all rows with missing values
human[!complete.cases(human),]
human[complete.cases(human), ] # Keep only the complete rows
human <- human[complete.cases(human), ] # Store the complete cases subset
sum(complete.cases(human))
dim(human)
# Remove the observations which relate to regions instead of countries.
# look at the last 10 observations
tail(human, 10)
# last indice we want to keep
last <- nrow(human) - 7
# choose everything until the last 7 observations
human_ <- human[1:last, ]
dim(human_)
# Define the row names of the data by the country names and remove the country name column from the data.
# add countries as rownames
rownames(human) <- human$Country
# remove the Country variable
human_ <- select(human, -Country)
dim(human_)
# Remove the observations which relate to regions instead of countries.
# look at the last 10 observations
tail(human, 10)
# last indice we want to keep
last <- nrow(human) - 7
# choose everything until the last 7 observations
human_ <- human[1:last, ]
dim(human_)
# add countries as rownames
rownames(human) <- human_$Country
# Remove the observations which relate to regions instead of countries.
# look at the last 10 observations
tail(human, 10)
# last indice we want to keep
last <- nrow(human) - 7
# choose everything until the last 7 observations
human <- human[1:last, ]
dim(human)
# Define the row names of the data by the country names and remove the country name column from the data.
# add countries as rownames
row.names(human) <- human$Country
# remove the Country variable
human <- select(human, -Country)
dim(human)
# read the human data
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep  =",", header = T)
# look at the (column) names of human
names(human)
# look at the structure of human
str(human)
# print out summaries of the variables
summary(human)
# Mutate the data: transform the Gross National Income (GNI) variable to numeric
# access the stringr package
library(stringr)
# look at the structure of the GNI column in 'human'
str(human$GNI)
# Transform the Gross National Income (GNI) variable to numeric
str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
#Excluding unneeded variables
# columns to keep
keep <- c("Country", "Edu2.FM", "Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
library(dplyr)
# select the 'keep' columns
human <- select(human, one_of(keep))
# print out a completeness indicator of the 'human' data
complete.cases(human)
# Remove all rows with missing values
human[!complete.cases(human),]
human[complete.cases(human), ] # Keep only the complete rows
human <- human[complete.cases(human), ] # Store the complete cases subset
sum(complete.cases(human))
dim(human)
# Remove the observations which relate to regions instead of countries.
# look at the last 10 observations
tail(human, 10)
# last indice we want to keep
last <- nrow(human) - 7
# choose everything until the last 7 observations
human <- human[1:last, ]
dim(human)
# Define the row names of the data by the country names and remove the country name column from the data.
# add countries as rownames
row.names(human) <- human$Country
# remove the Country variable
human <- select(human, -Country)
dim(human)
# add countries as rownames
row.names(human) <- human$Country
# remove the Country variable
human <- select(human, -Country)
dim(human)
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human2.txt", sep  =",", header = T)
str(human)
dim(human)
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human2.txt", sep  =",", header = T)
str(human)
dim(human)
head(human)
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human2.txt", sep  =",", header = T)
str(human)
dim(human)
library(GGally)
ggpairs(human)
cor(human_) %>% corrplot
library(GGally)
ggpairs(human)
cor(human) %>% corrplot
library(GGally)
ggpairs(human)
cor(human) %>% corrplot
library(dplyr)
library(GGally)
ggpairs(human)
cor(human) %>% corrplot
install.packages("corrplot")
library(dplyr)
library(GGally)
ggpairs(human)
cor(human) %>% corrplot
library(dplyr)
library(GGally)
ggpairs(human)
library(corrplot)
cor(human) %>% corrplot
summary(human)
library(dplyr)
library(GGally)
ggpairs(human)
library(corrplot)
cor(human) %>% corrplot
library(GGally)
ggpairs(human)
library(corrplot)
cor(human) %>% corrplot
pca_human <- prcomp(human)
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
library(GGally)
ggpairs(human)
library(corrplot)
cor(human) %>% corrplot
pca_human <- prcomp(human)
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
library(GGally)
ggpairs(human)
library(corrplot)
cor_matrix<-cor(human) %>% round(digits = 2)
cor_matrix
corrplot(cor_matrix, method="circle", type="upper", cl.pos="b", tl.pos="d", tl.cex = 0.6)
corrplot(cor_matrix)
library(GGally)
ggpairs(human)
library(corrplot)
cor_matrix<-cor(human) %>% round(digits = 2)
cor_matrix
corrplot(cor_matrix)
corrplot(cor_matrix, method="circle", type="upper", cl.pos="b", tl.pos="d", tl.cex = 0.6)
# standardize the variables
human_std <- scale(human)
summary(human_std)
# perform principal component analysis (with the SVD method)
pca_human <- prcomp(human_std)
# draw a biplot of the principal component representation and the original variables
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
# standardize the variables
human_std <- scale(human)
summary(human_std)
# perform principal component analysis (with the SVD method)
pca_human <- prcomp(human_std)
# draw a biplot of the principal component representation and the original variables
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
# standardize the variables
human_std <- scale(human)
summary(human_std)
# perform principal component analysis (with the SVD method)
pca_human <- prcomp(human_std)
# draw a biplot of the principal component representation and the original variables
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), x="Health and knowledge", y="Empowerment")
# standardize the variables
human_std <- scale(human)
summary(human_std)
# perform principal component analysis (with the SVD method)
pca_human <- prcomp(human_std)
# draw a biplot of the principal component representation and the original variables
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab ="Health and knowledge", ylab ="Empowerment")
install.packages("devtools")
install.packages("ggbiplot")
library(devtools)
install_github("ggbiplot", "vqv")
library(devtools)
library(ggplot2)
g <- ggplot2(pca_human, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
library(factoextra)
fviz_pca_var(pca_human, col.var="contrib")+
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=96) +
theme_minimal()
library(factoextra)
fviz_pca_var(pca_human, col.var="contrib")+
scale_color_gradient2(low="white", mid="red",
high="red", midpoint=96) +
theme_minimal()
library(factoextra)
p <- fviz_pca_ind(pca_human, label="none", habillage=human_std,
addEllipses=TRUE, ellipse.level=0.95)
print(p)
library(factoextra)
fviz_pca_ind(pca_human, col.ind="cos2", geom = "point") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=0.6)+ theme_minimal()
library(factoextra)
fviz_pca_var(pca_human, col.var="contrib")+
scale_color_gradient2(low="white", mid="red",
high="red", midpoint=96) +
theme_minimal()
library(factoextra)
fviz_pca_var(pca_human, col.ind="cos2", geom = "point") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=0.6)+ theme_minimal()
library(factoextra)
fviz_pca_var(pca_human, select.var = list(contrib = 3))
library(factoextra)
fviz_pca_biplot(pca_human, label ="var")
# standardize the variables
human_std <- scale(human)
summary(human_std)
# perform principal component analysis (with the SVD method)
pca_human <- prcomp(human_std)
s <- summary(pca_human)
s
# rounded percentages of variance captured by each PC
pca_pr <- round(100*s$importance[2,], digits = 1)
# print out the percentages of variance
pca_pr
# create object pc_lab to be used as axis labels
pc_lab <- paste0(names(pca_pr), " (", pca_pr, "%)")
# draw a biplot
biplot(pca_human, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = "Health and knowledge", ylab ="Empowerment")
library(FactoMineR)
data(tea)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
library(FactoMineR)
data(tea)
str(tea)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
gather(tea_time) %>%
ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
library(FactoMineR)
data(tea)
str(tea)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
library(dplyr)
library(tidyr)
gather(tea_time) %>%
ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
library(FactoMineR)
data(tea)
str(tea)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
library(dplyr)
library(tidyr)
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
library(FactoMineR)
data(tea)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
library(dplyr)
library(tidyr)
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
library(FactoMineR)
data(tea)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
library(dplyr)
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
library(FactoMineR)
data(tea)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
library(tidyr)
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("ind"), habillage = "quali")
library(factoextra)
fviz_mca_var(mca, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("ind"), habillage = "quali")
library(factoextra)
fviz_mca_var(mca, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("ind"), habillage = "quali")
library(factoextra)
fviz_mca_biplot(mca, label ="var")
fviz_mca_biplot(mca, label="var", col.var ="blue",
habillage=grp, addEllipses=TRUE, ellipse.level=0.95)
fviz_mca_biplot(mca, label="var", col.var ="blue",
habillage="quali", addEllipses=TRUE, ellipse.level=0.95)
fviz_mca_biplot(mca, label="var", col.var ="blue",
habillage="quali", addEllipses=TRUE)
fviz_mca_var(mca,
repel = TRUE, # Avoid text overlapping (slow)
ggtheme = theme_minimal())
# Color by cos2 values: quality on the factor map
fviz_mca_var(mca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, # Avoid text overlapping
ggtheme = theme_minimal())
# Change the transparency by cos2 values
fviz_mca_var(mca, alpha.var="cos2",
repel = TRUE,
ggtheme = theme_minimal())
# Contributions of rows to dimension 1
fviz_contrib(mca, choice = "var", axes = 1, top = 15)
# Contributions of rows to dimension 2
fviz_contrib(mca, choice = "var", axes = 2, top = 15)
fviz_mca_var(mca, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, # avoid text overlapping (slow)
ggtheme = theme_minimal()
)
# top 5 contributing variable categories
fviz_mca_biplot(mca,  select.var = list(contrib = 5),
ggtheme = theme_minimal())
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar(fill = "red") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar(fill = "green") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar(fill = "green", colour = "red") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
fviz_mca_var(mca,
repel = TRUE, # Avoid text overlapping (slow)
ggtheme = theme_minimal())
fviz_mca_var(mca, choice = "mca.cor",
repel = TRUE, # Avoid text overlapping (slow)
ggtheme = theme_minimal())
fviz_mca_var(mca, col.var="black", shape.var = 15,
repel = TRUE)
fviz_mca_var(mca,
repel = TRUE,
ggtheme = theme_minimal())
# Color by cos2 values: quality on the factor map
fviz_mca_var(mca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, # Avoid text overlapping
ggtheme = theme_minimal())
library(factoextra)
fviz_pca_var(pca_human, select.var = list(contrib = 3))
fviz_pca_var(pca_human, col.var="cos2") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=0.5) + theme_minimal()
# Change the transparency by cos2 values
fviz_mca_var(mca, alpha.var="cos2",
repel = TRUE,
ggtheme = theme_minimal())
summary(human)
library(GGally)
ggpairs(human)
library(corrplot)
library(tidyr)
cor_matrix<-cor(human) %>% round(digits = 2)
cor_matrix
library(corrplot)
# Correlation plot
ggcorr(cor_matrix, palette = "RdBu", label = TRUE)
corrplot(cor_matrix, method="circle", type="upper", cl.pos="b", tl.pos="d", tl.cex = 0.6)
pca_human <- prcomp(human)
pca_human
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
pca_human <- prcomp(human)
pca_human
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
library(factoextra)
fviz_pca_biplot(pca_human, label ="var")
library("factoextra")
fviz_screeplot(pca_human, ncp=8)
library(FactoMineR)
data(tea)
tea
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
library(dplyr)
tea_time <- dplyr::select(tea, dplyr::one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
library(FactoMineR)
data(tea)
tea
fviz_mca_var(mca, choice = "mca.cor",
repel = TRUE, # Avoid text overlapping (slow)
ggtheme = theme_minimal())
fviz_mca_var(mca,
repel = TRUE,
ggtheme = theme_minimal())
# top 5 contributing variable categories
fviz_mca_biplot(mca,  select.var = list(contrib = 3),
ggtheme = theme_minimal())
# top 5 contributing variable categories
fviz_mca_biplot(mca,  select.var = list(contrib = 2),
ggtheme = theme_minimal())
fviz_pca_contrib(pca_human, choice = "var", axes = 1)
fviz_pca_contrib(pca_human, choice = "var", axes = 2)
setwd("~/GitHub/IODS-project/data")
