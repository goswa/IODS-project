# visualize the dataset
library(dplyr)
library(tidyr)
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
library(FactoMineR)
data(tea)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
library(dplyr)
library(tidyr)
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
library(FactoMineR)
data(tea)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
library(dplyr)
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
library(FactoMineR)
data(tea)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
# visualize the dataset
library(tidyr)
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("ind"), habillage = "quali")
library(factoextra)
fviz_mca_var(mca, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("ind"), habillage = "quali")
library(factoextra)
fviz_mca_var(mca, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("ind"), habillage = "quali")
library(factoextra)
fviz_mca_biplot(mca, label ="var")
fviz_mca_biplot(mca, label="var", col.var ="blue",
habillage=grp, addEllipses=TRUE, ellipse.level=0.95)
fviz_mca_biplot(mca, label="var", col.var ="blue",
habillage="quali", addEllipses=TRUE, ellipse.level=0.95)
fviz_mca_biplot(mca, label="var", col.var ="blue",
habillage="quali", addEllipses=TRUE)
fviz_mca_var(mca,
repel = TRUE, # Avoid text overlapping (slow)
ggtheme = theme_minimal())
# Color by cos2 values: quality on the factor map
fviz_mca_var(mca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, # Avoid text overlapping
ggtheme = theme_minimal())
# Change the transparency by cos2 values
fviz_mca_var(mca, alpha.var="cos2",
repel = TRUE,
ggtheme = theme_minimal())
# Contributions of rows to dimension 1
fviz_contrib(mca, choice = "var", axes = 1, top = 15)
# Contributions of rows to dimension 2
fviz_contrib(mca, choice = "var", axes = 2, top = 15)
fviz_mca_var(mca, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, # avoid text overlapping (slow)
ggtheme = theme_minimal()
)
# top 5 contributing variable categories
fviz_mca_biplot(mca,  select.var = list(contrib = 5),
ggtheme = theme_minimal())
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar(fill = "red") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar(fill = "green") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# visualize the dataset
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar(fill = "green", colour = "red") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
fviz_mca_var(mca,
repel = TRUE, # Avoid text overlapping (slow)
ggtheme = theme_minimal())
fviz_mca_var(mca, choice = "mca.cor",
repel = TRUE, # Avoid text overlapping (slow)
ggtheme = theme_minimal())
fviz_mca_var(mca, col.var="black", shape.var = 15,
repel = TRUE)
fviz_mca_var(mca,
repel = TRUE,
ggtheme = theme_minimal())
# Color by cos2 values: quality on the factor map
fviz_mca_var(mca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE, # Avoid text overlapping
ggtheme = theme_minimal())
library(factoextra)
fviz_pca_var(pca_human, select.var = list(contrib = 3))
fviz_pca_var(pca_human, col.var="cos2") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=0.5) + theme_minimal()
# Change the transparency by cos2 values
fviz_mca_var(mca, alpha.var="cos2",
repel = TRUE,
ggtheme = theme_minimal())
summary(human)
library(GGally)
ggpairs(human)
library(corrplot)
library(tidyr)
cor_matrix<-cor(human) %>% round(digits = 2)
cor_matrix
library(corrplot)
# Correlation plot
ggcorr(cor_matrix, palette = "RdBu", label = TRUE)
corrplot(cor_matrix, method="circle", type="upper", cl.pos="b", tl.pos="d", tl.cex = 0.6)
pca_human <- prcomp(human)
pca_human
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
pca_human <- prcomp(human)
pca_human
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
library(factoextra)
fviz_pca_biplot(pca_human, label ="var")
library("factoextra")
fviz_screeplot(pca_human, ncp=8)
library(FactoMineR)
data(tea)
tea
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
library(dplyr)
tea_time <- dplyr::select(tea, dplyr::one_of(keep_columns))
# look at the summaries and structure of the data
summary(tea_time)
str(tea_time)
library(FactoMineR)
data(tea)
tea
fviz_mca_var(mca, choice = "mca.cor",
repel = TRUE, # Avoid text overlapping (slow)
ggtheme = theme_minimal())
fviz_mca_var(mca,
repel = TRUE,
ggtheme = theme_minimal())
# top 5 contributing variable categories
fviz_mca_biplot(mca,  select.var = list(contrib = 3),
ggtheme = theme_minimal())
# top 5 contributing variable categories
fviz_mca_biplot(mca,  select.var = list(contrib = 2),
ggtheme = theme_minimal())
fviz_pca_contrib(pca_human, choice = "var", axes = 1)
fviz_pca_contrib(pca_human, choice = "var", axes = 2)
library(tidyr)
library(dplyr)
library(ggplot2)
# Draw the plot
ggplot(RATSL, aes(x = Time, y = Weight, linetype = ID)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ Group, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(RATSL$Weight), max(RATSL$Weight)))
library(tidyr)
library(dplyr)
library(ggplot2)
# Draw the plot
ggplot(RATSL, aes(x = Time, y = Weight, linetype = ID)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ Group, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(RATSL$Weight), max(RATSL$Weight)))
ggplot(data = BPRSL, mapping = aes(x = week, y = bprs)) +
geom_point()
load("~/GitHub/IODS-project/data/BPRSL.Rdata")
View(BPRSL)
# Plot the BPRSL data
ggplot(BPRSL, aes(x = week, y = bprs)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "week") +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
p1 <- ggplot(RATSL, aes(x =week, y = bprs, group = subject))
# Plot the BPRSL data
ggplot(BPRSL, aes(x = week, y = bprs)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "week") +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
p1 <- ggplot(BPRSL, aes(x =week, y = bprs, group = subject))
p2 <- p1 + geom_text(aes(label = Group))
p3 <- p2 + scale_x_continuous(name = "Time (days)", breaks = seq(0, 60, 10))
p4 <- p3 + scale_y_continuous(name = "Weight (grams)")
p5 <- p4 + theme_bw()
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
# Plot the BPRSL data
ggplot(BPRSL, aes(x = week, y = bprs)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "week") +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
p1 <- ggplot(BPRSL, aes(x =week, y = bprs, group = subject))
p2 <- p1 + geom_text(aes(label = group))
p3 <- p2 + scale_x_continuous(name = "Time (days)", breaks = seq(0, 60, 10))
p4 <- p3 + scale_y_continuous(name = "Weight (grams)")
p5 <- p4 + theme_bw()
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
load("~/GitHub/IODS-project/data/RATSL.Rdata")
View(RATSL)
# Plot the BPRSL data
ggplot(BPRSL, aes(x = week, y = bprs)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "week") +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
p1 <- ggplot(BPRSL, aes(x =week, y = bprs, group = subject))
p2 <- p1 + geom_text(aes(label = treatment))
p3 <- p2 + scale_x_continuous(name = "Time (days)", breaks = seq(0, 60, 10))
p4 <- p3 + scale_y_continuous(name = "Weight (grams)")
p5 <- p4 + theme_bw()
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
# Plot the BPRSL data
ggplot(BPRSL, aes(x = week, y = bprs)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "week") +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
p1 <- ggplot(BPRSL, aes(x =week, y = bprs, group = subject))
p2 <- p1 + geom_text(aes(label = treatment))
p3 <- p2 + scale_x_continuous(name = "Time (week)")
p4 <- p3 + scale_y_continuous(name = "bprs (score)")
p5 <- p4 + theme_bw()
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
# Plot the BPRSL data
p1 <- ggplot(BPRSL, aes(x =week, y = bprs, group = subject))
p2 <- p1 + geom_text(aes(label = treatment))
p3 <- p2 + scale_x_continuous(name = "Time (week)")
p4 <- p3 + scale_y_continuous(name = "bprs (score)")
p5 <- p4 + theme_bw()
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
p1 <- ggplot(BPRSL, aes(x = week, y = bprs, group = subject))
p2 <- p1 + geom_line(aes(linetype = treatment))
p3 <- p2 + scale_x_continuous(name = "Time (days)", breaks = seq(0, 60, 10))
p4 <- p3 + scale_y_continuous(name = "Weight (grams)")
p5 <- p4 + theme_bw() + theme(legend.position = "top")
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
# Plot the BPRSL data
p1 <- ggplot(BPRSL, aes(x =week, y = bprs, group = subject))
p2 <- p1 + geom_text(aes(label = treatment))
p3 <- p2 + scale_x_continuous(name = "Time (week)")
p4 <- p3 + scale_y_continuous(name = "bprs (score)")
p5 <- p4 + theme_bw()
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
p1 <- ggplot(BPRSL, aes(x = week, y = bprs, group = subject))
p2 <- p1 + geom_line(aes(linetype = treatment))
p3 <- p2 + scale_x_continuous(name = "Time (days)", breaks = seq(0, 60, 10))
p4 <- p3 + scale_y_continuous(name = "Weight (grams)")
p5 <- p4 + theme_bw() + theme(legend.position = "top")
p5
# Plot the BPRSL data
p1 <- ggplot(BPRSL, aes(x =week, y = bprs, group = subject))
p2 <- p1 + geom_text(aes(label = treatment))
p3 <- p2 + scale_x_continuous(name = "Time (week)")
p4 <- p3 + scale_y_continuous(name = "bprs (score)")
p5 <- p4 + theme_bw()
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
p1 <- ggplot(BPRSL, aes(x = week, y = bprs, group = treatment))
p2 <- p1 + geom_line(aes(linetype = subject))
p3 <- p2 + scale_x_continuous(name = "Time (days)", breaks = seq(0, 60, 10))
p4 <- p3 + scale_y_continuous(name = "Weight (grams)")
p5 <- p4 + theme_bw() + theme(legend.position = "top")
p5
# Plot the BPRSL data
p1 <- ggplot(BPRSL, aes(x =week, y = bprs, group = subject))
p2 <- p1 + geom_text(aes(label = treatment))
p3 <- p2 + scale_x_continuous(name = "Time (week)")
p4 <- p3 + scale_y_continuous(name = "bprs (score)")
p5 <- p4 + theme_bw()
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
p1 <- ggplot(BPRSL, aes(x = week, y = bprs, group = treatment))
p2 <- p1 + geom_line(aes(linetype = treatment))
p3 <- p2 + scale_x_continuous(name = "Time (days)", breaks = seq(0, 60, 10))
p4 <- p3 + scale_y_continuous(name = "Weight (grams)")
p5 <- p4 + theme_bw() + theme(legend.position = "top")
p5
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
# Plot the BPRSL data
p1 <- ggplot(BPRSL, aes(x =week, y = bprs, group = subject))
p2 <- p1 + geom_text(aes(label = treatment))
p3 <- p2 + scale_x_continuous(name = "Time (week)")
p4 <- p3 + scale_y_continuous(name = "bprs (score)")
p5 <- p4 + theme_bw()
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
pairs(BPRS[, 3:13], cex = 0.7)
# Plot the BPRSL data
p1 <- ggplot(BPRSL, aes(x =week, y = bprs, group = subject))
p2 <- p1 + geom_text(aes(label = treatment))
p3 <- p2 + scale_x_continuous(name = "Time (week)")
p4 <- p3 + scale_y_continuous(name = "bprs (score)")
p5 <- p4 + theme_bw()
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) +
geom_line(aes(linetype = subject)) +
scale_x_continuous(name = "Time (days)", breaks = seq(0, 60, 10)) +
scale_y_continuous(name = "Weight (grams)") +
theme(legend.position = "top")
# Plot the BPRSL data
p1 <- ggplot(BPRSL, aes(x =week, y = bprs, group = subject))
p2 <- p1 + geom_text(aes(label = treatment))
p3 <- p2 + scale_x_continuous(name = "Time (week)")
p4 <- p3 + scale_y_continuous(name = "bprs (score)")
p5 <- p4 + theme_bw()
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) + theme_bw() + geom_bar(stat = "identity")
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
# Plot the BPRSL data
p1 <- ggplot(BPRSL, aes(x =week, y = bprs, group = subject))
p2 <- p1 + geom_text(aes(label = treatment))
p3 <- p2 + scale_x_continuous(name = "Time (week)")
p4 <- p3 + scale_y_continuous(name = "bprs (score)")
p5 <- p4 + theme_bw()
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
ggplot(aes(y = bprs, x = week, fill = treatment), data = BPRS;) + geom_boxplot()
# Plot the BPRSL data
p1 <- ggplot(BPRSL, aes(x =week, y = bprs, group = subject))
p2 <- p1 + geom_text(aes(label = treatment))
p3 <- p2 + scale_x_continuous(name = "Time (week)")
p4 <- p3 + scale_y_continuous(name = "bprs (score)")
p5 <- p4 + theme_bw()
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
ggplot(aes(y = bprs, x = week, fill = treatment), data = BPRS;) + geom_line()
# Plot the BPRSL data
p1 <- ggplot(BPRSL, aes(x =week, y = bprs, group = subject))
p2 <- p1 + geom_text(aes(label = treatment))
p3 <- p2 + scale_x_continuous(name = "Time (week)")
p4 <- p3 + scale_y_continuous(name = "bprs (score)")
p5 <- p4 + theme_bw()
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_text(aes(label = treatment)) +
scale_x_continuous(name = "Time (days)", breaks = seq(0, 60, 10)) +
scale_y_continuous(name = "Weight (grams)") +
theme(legend.position = "top")
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
# Plot the BPRSL data
ggplot(BPRSL, aes(x =week, y = bprs, group = subject) +
geom_text(aes(label = treatment)) +
scale_x_continuous(name = "Time (week)") +
scale_y_continuous(name = "bprs (score)")+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
# Plot the BPRSL data
p1 <- ggplot(BPRSL, aes(x =week, y = bprs, group = subject))
p2 <- p1 + geom_text(aes(label = treatment))
p3 <- p2 + scale_x_continuous(name = "Time (week)")
p4 <- p3 + scale_y_continuous(name = "bprs (score)")
p5 <- p4 + theme_bw()
p6 <- p5 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p6
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
# create a regression model RATS_reg
BPRS_reg <- lm(bprs ~ week + treatment, data = BPRSL)
# print out a summary of the model
summary(BPRS_reg)
summary(BPRS_reg)$coefficient
# dplyr, tidyr, lme4, ggplot2, RATS and RATSL are available
# create a random intercept and random slope model
BPRS_ref2 <- lmer(bprs ~ week * treatment + (week | subject), data = BPRSL, REML = FALSE)
# perform an ANOVA test on the two models
anova(BPRS_ref, BPRS_ref1)
# draw the plot
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) +
geom_smooth(aes(linetype = treatment)) +
scale_x_continuous(name = "weeks") +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
# Create a vector of the fitted values
Fitted <- fitted(BPRS_ref1)
# draw the plot
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "weeks") +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
# Create a vector of the fitted values
Fitted <- fitted(BPRS_ref1)
# draw the plot
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) +
geom_point(aes(linetype = treatment)) +
scale_x_continuous(name = "weeks") +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
# Create a vector of the fitted values
Fitted <- fitted(BPRS_ref1)
# draw the plot
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) +
geom_point(aes(linetype = treatment)) +
stat_smooth(method = "lm", col = "red")
scale_x_continuous(name = "weeks") +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
# draw the plot
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) +
geom_point(aes(linetype = treatment)) +
stat_smooth(method = "lm", col = "red")
# draw the plot
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) +
geom_point(aes(linetype = treatment)) +
geom_smooth()
stat_smooth(method = "lm", col = "green")
scale_x_continuous(name = "weeks") +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
# draw the plot
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) +
geom_point(aes(linetype = treatment)) +
geom_smooth(col = "green") +
scale_x_continuous(name = "weeks") +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
stat_smooth(method = "lm", col = "green")
# Create a vector of the fitted values
Fitted <- fitted(BPRS_ref1)
# draw the plot
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) +
geom_point(aes(linetype = treatment)) +
geom_smooth(col = "green") +
scale_x_continuous(name = "weeks") +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
# Create a vector of the fitted values
Fitted <- fitted(BPRS_ref1)
setwd("~/GitHub/IODS-project")
